{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  value: 0,\n  show: false\n};\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    setShow: (state, actions) => {\n      state.show = actions.payload;\n    },\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  setShow\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","value","show","counterSlice","name","reducers","setShow","state","actions","payload","increment","decrement","incrementByAmount","action","reducer"],"sources":["D:/Du-An-CV/SourceCode_CV/Chiaki.vn/my-app/src/store/Slide.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  show : false,\r\n\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState,\r\n  reducers: {\r\n    setShow : (state, actions) => {\r\n        state.show = actions.payload\r\n    },\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount ,setShow} = counterSlice.actions;\r\n\r\nexport default counterSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CAAC;EACRC,IAAI,EAAG;AAET,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EACtCK,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACRC,OAAO,EAAG,CAACC,KAAK,EAAEC,OAAO,KAAK;MAC1BD,KAAK,CAACL,IAAI,GAAGM,OAAO,CAACC,OAAO;IAChC,CAAC;IACDC,SAAS,EAAGH,KAAK,IAAK;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACN,KAAK,IAAI,CAAC;IAClB,CAAC;IACDU,SAAS,EAAGJ,KAAK,IAAK;MACpBA,KAAK,CAACN,KAAK,IAAI,CAAC;IAClB,CAAC;IACDW,iBAAiB,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MACpCN,KAAK,CAACN,KAAK,IAAIY,MAAM,CAACJ,OAAO;IAC/B;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEC,SAAS;EAAEC,SAAS;EAAEC,iBAAiB;EAAEN;AAAO,CAAC,GAAGH,YAAY,CAACK,OAAO;AAEvF,eAAeL,YAAY,CAACW,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}